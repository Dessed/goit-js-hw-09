{"mappings":"gfAAAA,EAAA,S,WAGA,IAAMC,EAAOC,SAASC,cAAc,SAG9BC,EAAS,GAmBf,SAASC,EAAcC,EAAUC,GAC/B,IAAIC,EAAOC,OAAOL,EAAOI,MACrBE,EAASN,EAAOM,OACpBH,EAAQE,OAAOL,EAAOG,OACtBD,EAAW,EACX,IAAIK,EAAQ,EAEZ,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAAIC,EAAwBC,aAAa,WACvC,IAAMC,EAAgBC,KAAKC,SAAW,GACtCb,IACAK,IAEIM,EACFJ,EAASP,EAAUC,GAGnBO,EAAQR,EAAUC,GAGjBI,GAASD,GACVU,cAAcL,GAEhBR,GAASC,IACRD,MA3BPN,EAAKoB,iBAAiB,UAdtB,SAA2BC,GACzBA,EAAEC,iBAEAC,MAAMC,KAAKxB,GAAMyB,SAAQ,SAAAC,GACL,WAAdA,EAAEC,UACNxB,EAAQuB,EAAEE,MAAQF,EAAEG,UAIxBzB,OAyCFA,EAAcC,SAAUC,OACrBwB,MAAK,SAAAC,G,IAAGC,EAAQD,EAAR1B,SAAU4B,EAAKF,EAALzB,MACjB0B,GAAY,EACZE,QAAQC,IAAI,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,UAE3DI,OAAM,SAAAN,G,IAAGC,EAAQD,EAAR1B,SAAU4B,EAAKF,EAALzB,MAClB4B,QAAQC,IAAI,sBAAqCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = document.querySelector('.form');\n\n\nconst values = {};\n\n\nfunction dataReceivedForm (e) {\n  e.preventDefault();\n\n    Array.from(refs).forEach(e => {\n      if (e.tagName !== \"BUTTON\") {\n      values [e.name] = e.value;\n      }\n  });\n\n  createPromise();\n\n};\n\n\nrefs.addEventListener('submit', dataReceivedForm);\n\nfunction createPromise(position, delay) {\n  let step = Number(values.step);\n  let amount = values.amount;\n  delay = Number(values.delay);\n  position = 0;\n  let count = 0;\n\n  return new Promise((resolve, reject) => {\n    \n    let timeGeneratorPromises = setInterval( () => {\n      const shouldResolve = Math.random() > 0.3;\n      position ++;\n      count++;\n     \n      if (shouldResolve) {\n        resolve (position, delay);\n        // resolve (Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`));\n      } else {\n        reject (position, delay);\n        // reject (Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`));\n      }\n      if(count == amount){\n        clearInterval(timeGeneratorPromises);\n      }\n      delay += step;\n    }, delay)\n  });\n };\n\n \n\n\n\n\ncreatePromise(position, delay)\n  .then(({ position, delay }) => {\n    position += 1;\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });"],"names":["parcelRequire","$ce04d3a99e08e73b$var$refs","document","querySelector","$ce04d3a99e08e73b$var$values","$ce04d3a99e08e73b$var$createPromise","position","delay","step","Number","amount","count","Promise","resolve","reject","timeGeneratorPromises","setInterval","shouldResolve","Math","random","clearInterval","addEventListener","e1","preventDefault","Array","from","forEach","e","tagName","name","value","then","param","_$position","_$delay","console","log","concat","catch"],"version":3,"file":"03-promises.72bb5e60.js.map"}